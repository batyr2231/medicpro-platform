"use client";

import React, { useState } from 'react';
import { MapPin, Calendar, Clock, FileText, Heart, ChevronRight, ArrowLeft } from 'lucide-react';
import { useOrders } from '../../hooks/useOrders';
import { useRouter } from 'next/navigation';

export default function CreateOrderPage() {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    serviceType: '',
    city: '–ê–ª–º–∞—Ç—ã',
    district: '',
    address: '',
    date: '',
    time: '',
    comment: '',
  });

  const { createOrder, loading: orderLoading, error: orderError } = useOrders();
  const router = useRouter();

  const services = [
    { id: '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º', name: 'üíâ –ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –Ω–∞ –¥–æ–º', desc: '–ö–∞–ø–µ–ª—å–Ω–∏—Ü—ã, —É–∫–æ–ª—ã, –ø–µ—Ä–µ–≤—è–∑–∫–∏' },
    { id: '–í—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏', name: 'ü©∫ –í—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏', desc: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞' },
    { id: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', name: '‚ù§Ô∏è –ö–∞—Ä–¥–∏–æ–ª–æ–≥', desc: '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–¥—Ü–µ–º' },
    { id: '–ù–µ–≤—Ä–æ–ª–æ–≥', name: 'üß† –ù–µ–≤—Ä–æ–ª–æ–≥', desc: '–ù–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' },
    { id: '–ü–µ–¥–∏–∞—Ç—Ä', name: 'üë∂ –ü–µ–¥–∏–∞—Ç—Ä', desc: '–î–µ—Ç—Å–∫–∏–π –≤—Ä–∞—á' },
    { id: '–¢–µ—Ä–∞–ø–µ–≤—Ç', name: 'üè• –¢–µ—Ä–∞–ø–µ–≤—Ç', desc: '–û–±—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è' },
  ]

  const districts = [
    '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π', '–ê—É—ç–∑–æ–≤—Å–∫–∏–π', '–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π', '–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π',
    '–ú–µ–¥–µ—É—Å–∫–∏–π', '–ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–∏–π', '–¢—É—Ä–∫—Å–∏–±—Å–∫–∏–π', '–ê–ª–∞—Ç–∞—É—Å–∫–∏–π'
  ];

  const handleChange = (field: string, value: any) => {
    setFormData({ ...formData, [field]: value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const scheduledDateTime = new Date(`${formData.date}T${formData.time}`).toISOString();
      
      const result = await createOrder({
        serviceType: services.find(s => s.id === formData.serviceType)?.name || formData.serviceType,
        address: formData.address,
        city: formData.city,
        district: formData.district,
        scheduledTime: scheduledDateTime,
        comment: formData.comment,
      });

      console.log('Order created:', result);
      
      // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
      router.push(`/client/orders/${result.id}`);
      
    } catch (err) {
      console.error('Create order error:', err);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 text-white">
      {/* Header */}
      <header className="border-b border-white/10 backdrop-blur-xl bg-slate-900/50 sticky top-0 z-50">
        <div className="max-w-5xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button 
              onClick={() => router.push('/')}
              className="flex items-center space-x-2 text-slate-300 hover:text-white transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
              <span>–ù–∞–∑–∞–¥</span>
            </button>
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-cyan-400 to-blue-600 flex items-center justify-center">
                <Heart className="w-5 h-5" />
              </div>
              <span className="font-bold text-lg">MedicPro</span>
            </div>
            <div className="w-20"></div>
          </div>
        </div>
      </header>

      {/* Progress Steps */}
      <div className="max-w-5xl mx-auto px-4 py-8">
        <div className="flex items-center justify-center mb-8">
          {[1, 2, 3].map((s) => (
            <div key={s} className="flex items-center">
              <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold transition-all ${
                step >= s 
                  ? 'bg-gradient-to-br from-cyan-500 to-blue-600 text-white shadow-lg shadow-blue-500/50' 
                  : 'bg-white/10 text-slate-400'
              }`}>
                {s}
              </div>
              {s < 3 && (
                <div className={`w-16 sm:w-24 h-1 mx-2 rounded transition-all ${
                  step > s ? 'bg-gradient-to-r from-cyan-500 to-blue-600' : 'bg-white/10'
                }`}></div>
              )}
            </div>
          ))}
        </div>

        <div>
          {/* Step 1: Service Selection */}
          {step === 1 && (
            <div className="space-y-6 animate-slide-in">
              <div className="text-center space-y-2 mb-8">
                <h1 className="text-3xl sm:text-4xl font-bold">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</h1>
                <p className="text-slate-400">–ö–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤–∞–º –Ω—É–∂–µ–Ω?</p>
              </div>

              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {services.map((service) => (
                  <button
                    key={service.id}
                    type="button"
                    onClick={() => handleChange('serviceType', service.id)}
                    className={`p-6 rounded-2xl text-left transition-all ${
                      formData.serviceType === service.id
                        ? 'bg-gradient-to-br from-cyan-500/20 to-blue-500/20 border-2 border-cyan-500 shadow-lg shadow-cyan-500/20'
                        : 'bg-white/5 border-2 border-white/10 hover:border-white/20 hover:bg-white/10'
                    }`}
                  >
                    <div className="text-2xl mb-2">{service.name.split(' ')[0]}</div>
                    <div className="font-semibold mb-1 text-white">
                      {service.name.substring(service.name.indexOf(' ') + 1)}
                    </div>
                    <div className="text-sm text-slate-400">{service.desc}</div>
                  </button>
                ))}
              </div>

              <div className="flex justify-end pt-4">
                <button
                  type="button"
                  onClick={() => formData.serviceType && setStep(2)}
                  disabled={!formData.serviceType}
                  className="px-8 py-4 rounded-xl bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed font-semibold shadow-lg shadow-blue-500/30 transition-all flex items-center"
                >
                  –î–∞–ª–µ–µ
                  <ChevronRight className="ml-2 w-5 h-5" />
                </button>
              </div>
            </div>
          )}

          {/* Step 2: Location & Time */}
          {step === 2 && (
            <div className="space-y-6 animate-slide-in">
              <div className="text-center space-y-2 mb-8">
                <h1 className="text-3xl sm:text-4xl font-bold">–ê–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è</h1>
                <p className="text-slate-400">–ö–æ–≥–¥–∞ –∏ –∫—É–¥–∞ –ø—Ä–∏–µ—Ö–∞—Ç—å –º–µ–¥–∏–∫—É?</p>
              </div>

              <div className="max-w-2xl mx-auto space-y-5">
                {/* District */}
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2 flex items-center">
                    <MapPin className="w-4 h-4 mr-2" />
                    –†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞
                  </label>
                  <select
                    value={formData.district}
                    onChange={(e) => handleChange('district', e.target.value)}
                    className="w-full px-4 py-3 rounded-xl bg-white/5 border border-white/10 focus:border-cyan-500 focus:outline-none text-white transition-colors"
                    required
                  >
                    <option value="" className="bg-slate-900">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</option>
                    {districts.map((d) => (
                      <option key={d} value={d} className="bg-slate-900">{d}</option>
                    ))}
                  </select>
                </div>

                {/* Address */}
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2 flex items-center">
                    <MapPin className="w-4 h-4 mr-2" />
                    –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                  </label>
                  <input
                    type="text"
                    value={formData.address}
                    onChange={(e) => handleChange('address', e.target.value)}
                    placeholder="—É–ª. –ê–±–∞—è 150, –∫–≤. 25"
                    className="w-full px-4 py-3 rounded-xl bg-white/5 border border-white/10 focus:border-cyan-500 focus:outline-none text-white placeholder-slate-500 transition-colors"
                    required
                  />
                </div>

                {/* Date */}
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2 flex items-center">
                    <Calendar className="w-4 h-4 mr-2" />
                    –î–∞—Ç–∞
                  </label>
                  <input
                    type="date"
                    value={formData.date}
                    onChange={(e) => handleChange('date', e.target.value)}
                    min={new Date().toISOString().split('T')[0]}
                    className="w-full px-4 py-3 rounded-xl bg-white/5 border border-white/10 focus:border-cyan-500 focus:outline-none text-white transition-colors"
                    required
                  />
                </div>

                {/* Time */}
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2 flex items-center">
                    <Clock className="w-4 h-4 mr-2" />
                    –í—Ä–µ–º—è
                  </label>
                  <input
                    type="time"
                    value={formData.time}
                    onChange={(e) => handleChange('time', e.target.value)}
                    className="w-full px-4 py-3 rounded-xl bg-white/5 border border-white/10 focus:border-cyan-500 focus:outline-none text-white transition-colors"
                    required
                  />
                </div>
              </div>

              <div className="flex justify-between pt-4 max-w-2xl mx-auto">
                <button
                  type="button"
                  onClick={() => setStep(1)}
                  className="px-8 py-4 rounded-xl bg-white/5 hover:bg-white/10 border border-white/10 font-semibold transition-all"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  type="button"
                  onClick={() => formData.district && formData.address && formData.date && formData.time && setStep(3)}
                  disabled={!formData.district || !formData.address || !formData.date || !formData.time}
                  className="px-8 py-4 rounded-xl bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed font-semibold shadow-lg shadow-blue-500/30 transition-all flex items-center"
                >
                  –î–∞–ª–µ–µ
                  <ChevronRight className="ml-2 w-5 h-5" />
                </button>
              </div>
            </div>
          )}

          {/* Step 3: Comment & Confirmation */}
          {step === 3 && (
            <div className="space-y-6 animate-slide-in">
              <div className="text-center space-y-2 mb-8">
                <h1 className="text-3xl sm:text-4xl font-bold">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h1>
                <p className="text-slate-400">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞</p>
              </div>

              <div className="max-w-2xl mx-auto space-y-6">
                {/* Summary Card */}
                <div className="rounded-2xl bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-xl border border-white/20 p-6 space-y-4">
                  <div className="flex items-start justify-between">
                    <div>
                      <div className="text-sm text-slate-400 mb-1">–£—Å–ª—É–≥–∞</div>
                      <div className="font-semibold">
                        {services.find(s => s.id === formData.serviceType)?.name}
                      </div>
                    </div>
                    <button
                      type="button"
                      onClick={() => setStep(1)}
                      className="text-cyan-400 hover:text-cyan-300 text-sm"
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>

                  <div className="border-t border-white/10 pt-4">
                    <div className="text-sm text-slate-400 mb-2">–ê–¥—Ä–µ—Å</div>
                    <div className="font-medium">
                      {formData.district}, {formData.address}
                    </div>
                  </div>

                  <div className="border-t border-white/10 pt-4 flex items-center justify-between">
                    <div>
                      <div className="text-sm text-slate-400 mb-1">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</div>
                      <div className="font-medium">
                        {new Date(formData.date).toLocaleDateString('ru-RU')} –≤ {formData.time}
                      </div>
                    </div>
                    <button
                      type="button"
                      onClick={() => setStep(2)}
                      className="text-cyan-400 hover:text-cyan-300 text-sm"
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                </div>

                {/* Comment */}
                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2 flex items-center">
                    <FileText className="w-4 h-4 mr-2" />
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <textarea
                    value={formData.comment}
                    onChange={(e) => handleChange('comment', e.target.value)}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞..."
                    rows={4}
                    className="w-full px-4 py-3 rounded-xl bg-white/5 border border-white/10 focus:border-cyan-500 focus:outline-none text-white placeholder-slate-500 transition-colors resize-none"
                  ></textarea>
                </div>

                {/* Info Block */}
                <div className="rounded-xl bg-cyan-500/10 border border-cyan-500/30 p-4">
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 rounded-lg bg-cyan-500/20 flex items-center justify-center flex-shrink-0">
                      <Heart className="w-5 h-5 text-cyan-400" />
                    </div>
                    <div className="text-sm">
                      <div className="font-semibold text-cyan-400 mb-1">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</div>
                      <div className="text-slate-300">
                        –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–µ–¥–∏–∫–∏ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. 
                        –ü–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.
                      </div>
                    </div>
                  </div>
                </div>

                {/* Payment Info */}
                <div className="rounded-xl bg-white/5 border border-white/10 p-4">
                  <div className="text-sm text-slate-400 mb-2">üí≥ –û–ø–ª–∞—Ç–∞</div>
                  <div className="text-slate-300">
                    –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –º–µ–¥–∏–∫—É –ø—Ä–∏ –≤–∏–∑–∏—Ç–µ. 
                    –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –±—É–¥–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ —Å –º–µ–¥–∏–∫–æ–º –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞.
                  </div>
                </div>

                {/* Error */}
                {orderError && (
                  <div className="p-3 rounded-xl bg-red-500/10 border border-red-500/30 text-red-400 text-sm">
                    ‚ùå {orderError}
                  </div>
                )}
              </div>

              {/* Buttons */}
              <div className="flex justify-between pt-4 max-w-2xl mx-auto">
                <button
                  type="button"
                  onClick={() => setStep(2)}
                  className="px-8 py-4 rounded-xl bg-white/5 hover:bg-white/10 border border-white/10 font-semibold transition-all"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={orderLoading}
                  className="px-8 py-4 rounded-xl bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 font-semibold shadow-lg shadow-blue-500/30 transition-all disabled:opacity-50"
                >
                  {orderLoading ? '–°–æ–∑–¥–∞—ë–º...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}